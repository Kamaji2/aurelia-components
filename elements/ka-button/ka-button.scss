$labelHeight: calc(var(--ac-ui-unit) / 1.6);
$labelFontSize: calc(var(--ac-ui-unit) / 3.07692308);
$buttonHeight: var(--ac-ui-unit);
$labelFontSize: calc(var(--ac-ui-unit) / 2.85714286);
$iconFontSize: calc(var(--ac-ui-unit) / 2.5);

/*
--ac-button-font-size
--ac-button-font-weight
*/


ka-button {
  user-select: none;
  
  display: inline-flex;
  flex: 0 0 auto;
  position: relative;
  align-items: flex-start;

  outline: none;
  cursor: pointer;

  margin: 0;
  border: 0;
  border-radius: var(--ac-ui-border-radius);
  padding: 0;
  height: $buttonHeight;
  overflow: hidden;

  font-size: $labelFontSize;
  font-weight: 600;
  line-height: $buttonHeight;
  text-align: center;
  text-decoration: none;
  color: transparent;

  background-color: transparent;
  transition: all 0.5s;

  /* PARTS */

  &:before {
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 0;
    background-color: transparent;
    transition: background-color 0.6s;
  }
  &:hover:before { transition: all 0.2s; }

  .ka-button-icon {
    position: relative;
    width: $buttonHeight;
    font-size: $iconFontSize;
    line-height: inherit;
    transition: opacity 0.5s;
  }
  .ka-button-icon + .ka-button-label {
    border-left: 1px solid transparent;
  }
  .ka-button-label {
    position: relative;
    padding: 0 calc(var(--ac-ui-unit) / 4);
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    transition: opacity 0.5s;
    &:empty {
      display: none;
    }
  }
  .busy {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: var(--ac-ui-border-radius);
    background-color: transparent;
    &:before, &:after {
      content: " ";
      position: absolute;
      border-radius: 50%;
      width: var(--ac-layout-spacing-unit);
      height: var(--ac-layout-spacing-unit);
      top: 50%;
      background-color: transparent;
      transform: translate(-50%, -50%);
      will-change: left, transform;
    }
    &:after {
      animation: left-to-right 0.5s linear infinite
    }
    &:before {
      animation: right-to-left 0.5s linear infinite
    }
  }

  /* STATES */

  &.flat {
    box-shadow: none !important;
  }
  &.active {
    box-shadow: none;
    transform: translateY(var(--ac-ui-border-radius));
  }
  &.busy {
    .ka-button-icon {
      opacity: 0;
    }
    .ka-button-label {
      opacity: 0;
    }
  }

  /* COLOR VARIANTS */
  @mixin ka-button-colors($key: null) {
    $selector: '&';
    @if ($key) { $selector: '&.' + $key; } @else { $key: 'ui-foreground-color'; }
    $color: var(--ac-#{$key}, var(--#{$key}-color));
    $color-rgb: var(--ac-#{$key}-rgb, var(--#{$key}-color-rgb));

    #{$selector} {
      // TRANSPARENT
      &:not(.inverted).transparent {
        color: $color;
        background-color: transparent;
        box-shadow: 0 0 5px rgba(#000, 0.2), 0 5px 5px -5px rgba(#000, 0.2);
        .ka-button-icon + .ka-button-label {
          padding-left: 0;
          background-color: transparent;
        }
        &.disabled {
          color: rgba($color-rgb, 0.3);
        }
        &:not(.disabled):hover:before { background-color: rgba(255, 255, 255, 0.5); }
        .busy:before, .busy:after { background-color: $color; }
      }
      // SOLID
      &:not(.inverted):not(.transparent) {
        color: #ffffff;
        background-color: $color;
        box-shadow: 0 0 5px rgba(#000, 0.2), 0 5px 5px -5px rgba(#000, 0.2);
        .ka-button-icon + .ka-button-label {
          border-color: rgba(255, 255, 255, 0.3);
          background-color: rgba(#ffffff, 0.1);
        }
        &.disabled {
          color: rgba(#ffffff, 0.5);
          &:before { background-color: rgba(#aaaaaa, 0.7); }
        }
        &:not(.disabled):hover:before { background-color: rgba(255, 255, 255, 0.2); }
        .busy:before, .busy:after { background-color: #ffffff; }
      }
      // INVERTED
      &:not(.transparent).inverted {
        color: $color;
        background-color: #ffffff;
        box-shadow: inset 0 0 0px 1px rgba($color-rgb, 0.7), 0 0 5px rgba(#000, 0.2), 0 5px 5px -5px rgba(#000, 0.2);
        &.flat {
          box-shadow: inset 0 0 0px 1px rgba($color-rgb, 0.7) !important;
        }
        .ka-button-icon + .ka-button-label {
          border-color: rgba($color-rgb, 0.3);
          background-color: rgba($color-rgb, 0.05);
        }
        &.disabled {
          color: rgba($color-rgb, 0.3);
          background-color: #f6f6f6;
          box-shadow: inset 0 0 0px 1px rgba($color-rgb, 0.3), 0 0 5px rgba(#000, 0.2), 0 5px 5px -5px rgba(#000, 0.2);

        }
        &:not(.disabled):hover:before { background-color: rgba($color-rgb, 0.1); }
        .busy:before, .busy:after { background-color: $color; }
      }
    }
  }
  @include ka-button-colors();
  @include ka-button-colors('primary');
  @include ka-button-colors('secondary');
  @include ka-button-colors('warning');
  @include ka-button-colors('danger');
  @include ka-button-colors('pending');
  @include ka-button-colors('success');
}

@keyframes left-to-right {
  0% {
    opacity: 0.5;
    left: calc(50% - var(--ac-layout-spacing-unit));
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 1;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.5);
  }
  100% {
    opacity: 0.5;
    left: calc(50% + var(--ac-layout-spacing-unit));
    transform: translate(-50%, -50%) scale(1);
  }
}
@keyframes right-to-left {
  0% {
    opacity: 0.5;
    left: calc(50% + var(--ac-layout-spacing-unit));
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 0;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.5);
  }
  100% {
    opacity: 0.5;
    left: calc(50% - var(--ac-layout-spacing-unit));
    transform: translate(-50%, -50%) scale(1);
  }
}